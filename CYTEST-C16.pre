
# 1 "D:\MyWorks\TEST\CYTEST_C16_16F72\CYTEST-C16.c"

# 20 "C:\Program Files\HI-TECH Software\PICC\9.80\include\pic16f7x.h"
volatile unsigned char INDF @ 0x00;
volatile unsigned char TMR0 @ 0x01;
volatile unsigned char PCL @ 0x02;
volatile unsigned char STATUS @ 0x03;
volatile unsigned char FSR @ 0x04;
volatile unsigned char PORTA @ 0x05;
volatile unsigned char PORTB @ 0x06;
volatile unsigned char PORTC @ 0x07;

# 32
volatile unsigned char PCLATH @ 0x0A;
volatile unsigned char INTCON @ 0x0B;
volatile unsigned char PIR1 @ 0x0C;

# 38
volatile unsigned char TMR1L @ 0x0E;
volatile unsigned char TMR1H @ 0x0F;
volatile unsigned char T1CON @ 0x10;
volatile unsigned char TMR2 @ 0x11;
volatile unsigned char T2CON @ 0x12;
volatile unsigned char SSPBUF @ 0x13;
volatile unsigned char SSPCON @ 0x14;
volatile unsigned char CCPR1L @ 0x15;
volatile unsigned char CCPR1H @ 0x16;
volatile unsigned char CCP1CON @ 0x17;

# 56
volatile unsigned char ADRES @ 0x1E;
volatile unsigned char ADCON0 @ 0x1F;


volatile unsigned char OPTION @ 0x81;
volatile unsigned char TRISA @ 0x85;
volatile unsigned char TRISB @ 0x86;
volatile unsigned char TRISC @ 0x87;

# 68
volatile unsigned char PIE1 @ 0x8C;

# 72
volatile unsigned char PCON @ 0x8E;
volatile unsigned char PR2 @ 0x92;
volatile unsigned char SSPADD @ 0x93;
volatile unsigned char SSPSTAT @ 0x94;

# 80
volatile unsigned char ADCON1 @ 0x9F;



volatile unsigned char PMDATL @ 0x10C;
volatile unsigned char PMADRL @ 0x10D;

# 90
volatile unsigned char PMDATH @ 0x10E;
volatile unsigned char PMADRH @ 0x10F;


volatile unsigned char PMCON1 @ 0x18C;


volatile bit IRP @ (unsigned)&STATUS*8+7;
volatile bit RP1 @ (unsigned)&STATUS*8+6;
volatile bit RP0 @ (unsigned)&STATUS*8+5;
volatile bit TO @ (unsigned)&STATUS*8+4;
volatile bit PD @ (unsigned)&STATUS*8+3;
volatile bit ZERO @ (unsigned)&STATUS*8+2;
volatile bit DC @ (unsigned)&STATUS*8+1;
volatile bit CARRY @ (unsigned)&STATUS*8+0;


volatile bit RA5 @ (unsigned)&PORTA*8+5;
volatile bit RA4 @ (unsigned)&PORTA*8+4;
volatile bit RA3 @ (unsigned)&PORTA*8+3;
volatile bit RA2 @ (unsigned)&PORTA*8+2;
volatile bit RA1 @ (unsigned)&PORTA*8+1;
volatile bit RA0 @ (unsigned)&PORTA*8+0;


volatile bit RB7 @ (unsigned)&PORTB*8+7;
volatile bit RB6 @ (unsigned)&PORTB*8+6;
volatile bit RB5 @ (unsigned)&PORTB*8+5;
volatile bit RB4 @ (unsigned)&PORTB*8+4;
volatile bit RB3 @ (unsigned)&PORTB*8+3;
volatile bit RB2 @ (unsigned)&PORTB*8+2;
volatile bit RB1 @ (unsigned)&PORTB*8+1;
volatile bit RB0 @ (unsigned)&PORTB*8+0;


volatile bit RC7 @ (unsigned)&PORTC*8+7;
volatile bit RC6 @ (unsigned)&PORTC*8+6;
volatile bit RC5 @ (unsigned)&PORTC*8+5;
volatile bit RC4 @ (unsigned)&PORTC*8+4;
volatile bit RC3 @ (unsigned)&PORTC*8+3;
volatile bit RC2 @ (unsigned)&PORTC*8+2;
volatile bit RC1 @ (unsigned)&PORTC*8+1;
volatile bit RC0 @ (unsigned)&PORTC*8+0;

# 152
volatile bit GIE @ (unsigned)&INTCON*8+7;
volatile bit PEIE @ (unsigned)&INTCON*8+6;
volatile bit T0IE @ (unsigned)&INTCON*8+5;
volatile bit INTE @ (unsigned)&INTCON*8+4;
volatile bit RBIE @ (unsigned)&INTCON*8+3;
volatile bit T0IF @ (unsigned)&INTCON*8+2;
volatile bit INTF @ (unsigned)&INTCON*8+1;
volatile bit RBIF @ (unsigned)&INTCON*8+0;

volatile bit TMR0IE @ (unsigned)&INTCON*8+5;
volatile bit TMR0IF @ (unsigned)&INTCON*8+2;

# 168
volatile bit ADIF @ (unsigned)&PIR1*8+6;

# 173
volatile bit SSPIF @ (unsigned)&PIR1*8+3;
volatile bit CCP1IF @ (unsigned)&PIR1*8+2;
volatile bit TMR2IF @ (unsigned)&PIR1*8+1;
volatile bit TMR1IF @ (unsigned)&PIR1*8+0;

# 184
volatile bit T1CKPS1 @ (unsigned)&T1CON*8+5;
volatile bit T1CKPS0 @ (unsigned)&T1CON*8+4;
volatile bit T1OSCEN @ (unsigned)&T1CON*8+3;
volatile bit T1SYNC @ (unsigned)&T1CON*8+2;
volatile bit TMR1CS @ (unsigned)&T1CON*8+1;
volatile bit TMR1ON @ (unsigned)&T1CON*8+0;


volatile bit TOUTPS3 @ (unsigned)&T2CON*8+6;
volatile bit TOUTPS2 @ (unsigned)&T2CON*8+5;
volatile bit TOUTPS1 @ (unsigned)&T2CON*8+4;
volatile bit TOUTPS0 @ (unsigned)&T2CON*8+3;
volatile bit TMR2ON @ (unsigned)&T2CON*8+2;
volatile bit T2CKPS1 @ (unsigned)&T2CON*8+1;
volatile bit T2CKPS0 @ (unsigned)&T2CON*8+0;


volatile bit WCOL @ (unsigned)&SSPCON*8+7;
volatile bit SSPOV @ (unsigned)&SSPCON*8+6;
volatile bit SSPEN @ (unsigned)&SSPCON*8+5;
volatile bit CKP @ (unsigned)&SSPCON*8+4;
volatile bit SSPM3 @ (unsigned)&SSPCON*8+3;
volatile bit SSPM2 @ (unsigned)&SSPCON*8+2;
volatile bit SSPM1 @ (unsigned)&SSPCON*8+1;
volatile bit SSPM0 @ (unsigned)&SSPCON*8+0;


volatile bit CCP1X @ (unsigned)&CCP1CON*8+5;
volatile bit CCP1Y @ (unsigned)&CCP1CON*8+4;
volatile bit CCP1M3 @ (unsigned)&CCP1CON*8+3;
volatile bit CCP1M2 @ (unsigned)&CCP1CON*8+2;
volatile bit CCP1M1 @ (unsigned)&CCP1CON*8+1;
volatile bit CCP1M0 @ (unsigned)&CCP1CON*8+0;

# 238
volatile bit ADCS1 @ (unsigned)&ADCON0*8+7;
volatile bit ADCS0 @ (unsigned)&ADCON0*8+6;
volatile bit CHS2 @ (unsigned)&ADCON0*8+5;
volatile bit CHS1 @ (unsigned)&ADCON0*8+4;
volatile bit CHS0 @ (unsigned)&ADCON0*8+3;
volatile bit ADGO @ (unsigned)&ADCON0*8+2;

volatile bit GODONE @ (unsigned)&ADCON0*8+2;
volatile bit ADON @ (unsigned)&ADCON0*8+0;


volatile bit RBPU @ (unsigned)&OPTION*8+7;
volatile bit INTEDG @ (unsigned)&OPTION*8+6;
volatile bit T0CS @ (unsigned)&OPTION*8+5;
volatile bit T0SE @ (unsigned)&OPTION*8+4;
volatile bit PSA @ (unsigned)&OPTION*8+3;
volatile bit PS2 @ (unsigned)&OPTION*8+2;
volatile bit PS1 @ (unsigned)&OPTION*8+1;
volatile bit PS0 @ (unsigned)&OPTION*8+0;


volatile bit TRISA5 @ (unsigned)&TRISA*8+5;
volatile bit TRISA4 @ (unsigned)&TRISA*8+4;
volatile bit TRISA3 @ (unsigned)&TRISA*8+3;
volatile bit TRISA2 @ (unsigned)&TRISA*8+2;
volatile bit TRISA1 @ (unsigned)&TRISA*8+1;
volatile bit TRISA0 @ (unsigned)&TRISA*8+0;


volatile bit TRISB7 @ (unsigned)&TRISB*8+7;
volatile bit TRISB6 @ (unsigned)&TRISB*8+6;
volatile bit TRISB5 @ (unsigned)&TRISB*8+5;
volatile bit TRISB4 @ (unsigned)&TRISB*8+4;
volatile bit TRISB3 @ (unsigned)&TRISB*8+3;
volatile bit TRISB2 @ (unsigned)&TRISB*8+2;
volatile bit TRISB1 @ (unsigned)&TRISB*8+1;
volatile bit TRISB0 @ (unsigned)&TRISB*8+0;


volatile bit TRISC7 @ (unsigned)&TRISC*8+7;
volatile bit TRISC6 @ (unsigned)&TRISC*8+6;
volatile bit TRISC5 @ (unsigned)&TRISC*8+5;
volatile bit TRISC4 @ (unsigned)&TRISC*8+4;
volatile bit TRISC3 @ (unsigned)&TRISC*8+3;
volatile bit TRISC2 @ (unsigned)&TRISC*8+2;
volatile bit TRISC1 @ (unsigned)&TRISC*8+1;
volatile bit TRISC0 @ (unsigned)&TRISC*8+0;

# 312
volatile bit ADIE @ (unsigned)&PIE1*8+6;

# 317
volatile bit SSPIE @ (unsigned)&PIE1*8+3;
volatile bit CCP1IE @ (unsigned)&PIE1*8+2;
volatile bit TMR2IE @ (unsigned)&PIE1*8+1;
volatile bit TMR1IE @ (unsigned)&PIE1*8+0;

# 328
volatile bit POR @ (unsigned)&PCON*8+1;
volatile bit BOR @ (unsigned)&PCON*8+0;


volatile bit SMP @ (unsigned)&SSPSTAT*8+7;
volatile bit CKE @ (unsigned)&SSPSTAT*8+6;
volatile bit DA @ (unsigned)&SSPSTAT*8+5;
volatile bit STOP @ (unsigned)&SSPSTAT*8+4;
volatile bit START @ (unsigned)&SSPSTAT*8+3;
volatile bit RW @ (unsigned)&SSPSTAT*8+2;
volatile bit UA @ (unsigned)&SSPSTAT*8+1;
volatile bit BF @ (unsigned)&SSPSTAT*8+0;

# 363
volatile bit PCFG2 @ (unsigned)&ADCON1*8+2;
volatile bit PCFG1 @ (unsigned)&ADCON1*8+1;
volatile bit PCFG0 @ (unsigned)&ADCON1*8+0;


volatile bit RD @ (unsigned)&PMCON1*8+0;


# 503 "C:\Program Files\HI-TECH Software\PICC\9.80\include\pic.h"
#pragma inline(_nop)
extern void _nop(void);

# 556
extern unsigned int flash_read(unsigned short addr);


# 629
#pragma inline(_delay)
extern void _delay(unsigned long);

# 12 "D:\MyWorks\TEST\CYTEST_C16_16F72\init.h"
union ulword {
unsigned long int lword;
unsigned char byte[4];
};

union uword {
unsigned int word;
unsigned char byte[2];
struct{
unsigned char B0 :1;
unsigned char B1 :1;
unsigned char B2 :1;
unsigned char B3 :1;
unsigned char B4 :1;
unsigned char B5 :1;
unsigned char B6 :1;
unsigned char B7 :1;
unsigned char B8 :1;
unsigned char B9 :1;
unsigned char B10:1;
unsigned char B11:1;
unsigned char B12:1;
unsigned char B13:1;
unsigned char B14:1;
unsigned char B15:1;
}bits;
};

union ubyte {
unsigned char byte;
struct{
unsigned char B0 :1;
unsigned char B1 :1;
unsigned char B2 :1;
unsigned char B3 :1;
unsigned char B4 :1;
unsigned char B5 :1;
unsigned char B6 :1;
unsigned char B7 :1;
}bits;
};

# 81
extern void Init_System(void);

# 31 "D:\MyWorks\TEST\CYTEST_C16_16F72\CYTEST-C16.c"
asm("\tpsect config,class=CONFIG,delta=2"); asm("\tdw ""0x3FFD & 0x3FFB & 0x3FF7 & 0x3FFF & 0x3FEF");

# 46
static unsigned char r0,r1,r2,r3,r4,r5,r6;
static unsigned int cnt0,cnt1;
static unsigned int TEMP;
static union uword temp;

static unsigned int DRESULT;
static unsigned char DREMAIN;

static union ulword dresult,dcnt0;
static unsigned int dcnt1;
static unsigned char dremain;


const unsigned char aa[]={1,2};
const unsigned char bb[]={9,10,11,12};
const unsigned char cc[] = {7,7,7};
const struct scan
{
const unsigned char *f[3];
}table[1]={{aa,bb,cc}};


const unsigned char *cp;


unsigned int arrAD[8] = {512,120,358,887,978,216,772,512};
unsigned int adv=0;

unsigned int filter(unsigned int *ptArr);



static void interrupt isr (void)
{


}

# 88
void main (void)
{
Init_System ();
GIE = 1;

if (CARRY == 1)
r0 = 1;

# 102
adv = filter(arrAD);

# 108
while (1)
{



for (cnt0=0;cnt0<256;cnt0++)
{


for (cnt1=0;cnt1<256;cnt1++)
{
TEMP = cnt0*cnt1;
r0 = cnt0;
r1 = cnt1;


# 123
#asm
    pMul8x8:
            CLRF _r2
            CLRF _r3

               MOVLW 0x8
            MOVWF _r4

                        MOVF _r0,W


                            ML10:
            RRF _r1,F

          BTFSC 0x3,0
            ADDWF _r3,F

            RRF _r3,F
            RRF _r2,F

            DECFSZ _r4,F
            goto ML10

#endasm 
        temp.byte[1] = r3;
temp.byte[0] = r2;

if (TEMP != temp.word)
while(1);
}
}


for (dcnt0.lword=0;dcnt0.lword<65536;dcnt0.lword++)
{
dcnt1 = 1;

for (dcnt1=1;dcnt1 <256 ;dcnt1++)
{
DRESULT =(unsigned int) (dcnt0.lword/dcnt1);
DREMAIN =(unsigned char) (dcnt0.lword%dcnt1);

r1 = dcnt0.byte[1];
r0 = dcnt0.byte[0];
r2 = (unsigned char)dcnt1;


# 169
#asm
      CALL pDiv16x8
      goto JMPOUT


            pDiv16x8:
            CLRF _r3
            CLRF _r4

                CALL DV10
    DV10:
            MOVLW 8
            MOVWF _r5
    DV20:

                        BCF 0x3,0
            RLF _r1,F
            RLF _r3,F
            RLF _r4,F
    ;---------------------------------------; r4,r3 - r2 = r4,r3
            INCF _r1,F

                MOVF _r2,W
            SUBWF _r3,F

                        BTFSC 0x3,0
            goto DV30

                MOVLW 1
            SUBWF _r4,F

                        BTFSC 0x3,0
            goto DV30
    ;---------------------------------------; r4,r3 + r2 = r4,r3
            DECF _r1,F

                MOVF _r2,W
            ADDWF _r3,F

                        BTFSC 0x3,0
            INCF _r4,F
    DV30:
            DECFSZ _r5,F
            goto DV20
    ;---------------------------------------
            MOVF _r1,W
            MOVWF _r6

                MOVF _r0,W
            MOVWF _r1

                MOVF _r6,W
            MOVWF _r0
            RETURN

        JMPOUT:
#endasm 

    dresult.byte[1] = r1;
dresult.byte[0] = r0;
dremain = r3;

if ((DRESULT != dresult.lword)||(DREMAIN != dremain))
while(1);
}
}
while (1);

}



}




unsigned int filter(unsigned int *ptArr)
{
unsigned char i,j;
unsigned int value_buf[8];
unsigned int sum,tmp;


for (i=0;i<8;i++)
value_buf[i]=*ptArr++;


for (i=0;i<7;i++)
{
for (j=(i+1);j<8;j++)
{
if (value_buf[i] > value_buf[j])
{
tmp = value_buf[i];
value_buf[i] = value_buf[j];
value_buf[j] = tmp;
}
}
}

sum=0;
sum+=value_buf[2];
sum+=value_buf[3];
sum+=value_buf[4];
sum+=value_buf[5];
sum>>=2;

return sum;
}
